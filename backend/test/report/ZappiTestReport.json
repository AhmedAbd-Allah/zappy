{
  "stats": {
    "suites": 1,
    "tests": 5,
    "passes": 5,
    "pending": 0,
    "failures": 0,
    "start": "2019-03-09T20:41:50.390Z",
    "end": "2019-03-09T20:41:53.240Z",
    "duration": 2850,
    "testsRegistered": 5,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "f84412b4-7192-493c-8bf6-990b8461f1ec",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "5a635cd1-86af-4100-9724-f633f7ed1e1f",
        "title": "Save Tweets Test",
        "fullFile": "/home/ahmed/Desktop/Zappy/backend/test/scenarios/saveTweets.test.js",
        "file": "/test/scenarios/saveTweets.test.js",
        "beforeHooks": [],
        "afterHooks": [
          {
            "title": "\"after each\" hook",
            "fullTitle": "Save Tweets Test \"after each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "addContext(this, {\n    title: \"Request\",\n    value: this.request\n});\naddContext(this, {\n    title: \"Response\",\n    value: this.response\n});\nthis.request = null;\nthis.response = null;\ndone();",
            "err": {},
            "isRoot": false,
            "uuid": "ae7aeb9a-edb4-4bc2-8dee-8b28f8d5a43d",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "should save new Tweets",
            "fullTitle": "Save Tweets Test should save new Tweets",
            "timedOut": false,
            "duration": 29,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Request\",\n    \"value\": [\n      {\n        \"_id\": \"5c83c355dcc9e468863155e9\",\n        \"created_at\": \"Sun Dec 10 09:06:28 +0000 2017\",\n        \"text\": \"Hello from Elements office\",\n        \"__v\": 0\n      },\n      {\n        \"_id\": \"5c83c355dcc9e468863155ea\",\n        \"created_at\": \"Wed Dec 06 16:02:44 +0000 2017\",\n        \"text\": \"Tell us on #zappy about your experience.\",\n        \"__v\": 0\n      },\n      {\n        \"_id\": \"5c83c355dcc9e468863155ec\",\n        \"created_at\": \"Tue Dec 05 19:11:03 +0000 2017\",\n        \"text\": \"Zappy is in its final phase. Congrats!\",\n        \"__v\": 0\n      },\n      {\n        \"_id\": \"5c83c355dcc9e468863155ed\",\n        \"created_at\": \"Tue Dec 05 19:06:02 +0000 2017\",\n        \"text\": \"Zappy is now ready to launch... Are you ready?!\",\n        \"__v\": 0\n      },\n      {\n        \"_id\": \"5c83c355dcc9e468863155eb\",\n        \"created_at\": \"Wed Dec 06 15:55:43 +0000 2017\",\n        \"text\": \"WOW! Now you can check Zappy, here: https://t.co/GjIA19DC0w..\",\n        \"__v\": 0\n      },\n      {\n        \"_id\": \"5c83c355dcc9e468863155f0\",\n        \"created_at\": \"Sun Dec 03 10:02:45 +0000 2017\",\n        \"text\": \"Hello! This is the first tweet from FictionFone.\",\n        \"__v\": 0\n      },\n      {\n        \"_id\": \"5c83c355dcc9e468863155ef\",\n        \"created_at\": \"Sun Dec 03 10:52:46 +0000 2017\",\n        \"text\": \"Our developers are building 'Zappy'. Can you guess what is Zappy?! ;)\",\n        \"__v\": 0\n      },\n      {\n        \"_id\": \"5c83c355dcc9e468863155ee\",\n        \"created_at\": \"Tue Dec 05 14:13:55 +0000 2017\",\n        \"text\": \"This is my third tweet everyone. Please welcome #FictionFone\",\n        \"__v\": 0\n      }\n    ]\n  },\n  {\n    \"title\": \"Response\",\n    \"value\": \"undefined\"\n  }\n]",
            "code": "this.request = newTweets;\n        var response;\n        twitterController.saveTweets(newTweets, function (err, savedTweets) {\n            response = savedTweets;\n            expect(err).to.be.null\n            expect(savedTweets.length).to.equal(newTweets.length);\n            for (var i = 0; i < savedTweets; i++) {\n                expect(savedTweets[i].created_at).to.equal(newTweets[i].created_at)\n                expect(savedTweets[i].text).to.equal(newTweets[i].text)\n            }\n            done()\n        })\n        this.response = response",
            "err": {},
            "isRoot": false,
            "uuid": "c1285f06-1737-4cd6-9793-98ebeb4741ed",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should connect with slack",
            "fullTitle": "Save Tweets Test should connect with slack",
            "timedOut": false,
            "duration": 521,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Request\",\n    \"value\": {\n      \"token\": \"xoxb-565600177584-566783663267-zW1pVSDCav9s6UvY8SYUXhpT\",\n      \"name\": \"zappybot\",\n      \"apiURL\": \"https://slack.com/api/\",\n      \"methodeName\": \"rtm.start\"\n    }\n  },\n  {\n    \"title\": \"Response\",\n    \"value\": null\n  }\n]",
            "code": "var request = Config.slack;\nthis.request = request;\n\nslackController.connect(request, function (err, response) {\n    expect(err).to.be.null\n    expect(response.requestData).to.have.property(\"token\");\n    expect(response.requestData).to.have.property(\"name\");\n    expect(response.workSpaceData).to.have.property(\"wsUrl\");\n    expect(response.workSpaceData).to.have.property(\"self\");\n    expect(response.workSpaceData).to.have.property(\"team\");\n    expect(response.workSpaceData).to.have.property(\"channels\");\n    expect(response.workSpaceData).to.have.property(\"users\");\n    expect(response.workSpaceData).to.have.property(\"ims\");\n    expect(response.workSpaceData).to.have.property(\"groups\");\n    expect(response.workSpaceData.self.name).to.equal(\"zappybot\");\n    done()\n})",
            "err": {},
            "isRoot": false,
            "uuid": "e4044840-6fad-49e8-89e8-8f9b11c606ed",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should listen to slack",
            "fullTitle": "Save Tweets Test should listen to slack",
            "timedOut": false,
            "duration": 1748,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Request\",\n    \"value\": {\n      \"token\": \"xoxb-565600177584-566783663267-zW1pVSDCav9s6UvY8SYUXhpT\",\n      \"name\": \"zappybot\",\n      \"apiURL\": \"https://slack.com/api/\",\n      \"methodeName\": \"rtm.start\"\n    }\n  },\n  {\n    \"title\": \"Response\",\n    \"value\": null\n  }\n]",
            "code": "var request = Config.slack;\nthis.request = request;\n\nslackController.listen(request, function (err, response) {\n    expect(err).to.be.null\n    response = JSON.parse(response)\n    expect(response).to.have.property(\"type\");\n    done()\n})",
            "err": {},
            "isRoot": false,
            "uuid": "e85c8b01-b97a-4607-b893-805962c047d3",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should send request to  slack",
            "fullTitle": "Save Tweets Test should send request to  slack",
            "timedOut": false,
            "duration": 497,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Request\",\n    \"value\": {\n      \"url\": \"https://slack.com/api/rtm.start\",\n      \"form\": {\n        \"token\": \"xoxb-565600177584-566783663267-zW1pVSDCav9s6UvY8SYUXhpT\",\n        \"name\": \"zappybot\",\n        \"apiURL\": \"https://slack.com/api/\",\n        \"methodeName\": \"rtm.start\"\n      }\n    }\n  },\n  {\n    \"title\": \"Response\",\n    \"value\": null\n  }\n]",
            "code": "var request = Config.slack;\n\n\nvar request = {\n    url: Config.slack.apiURL + 'rtm.start',\n    form: slackData\n};\nthis.request = request;\nvar res;\nslackController.apiRequest(request).then((data) => {\n    expect(data.ok).to.be.true\n    expect(data).to.have.property(\"url\");\n    expect(data).to.have.property(\"self\");\n    expect(data).to.have.property(\"team\");\n    done()\n}).catch(err => {\n    console.log(err)\n    // return cb(err)\n})",
            "err": {},
            "isRoot": false,
            "uuid": "9a944f8a-72fb-48e0-9c5b-45b95138c2d5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should get Tweets from db",
            "fullTitle": "Save Tweets Test should get Tweets from db",
            "timedOut": false,
            "duration": 20,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Request\",\n    \"value\": null\n  },\n  {\n    \"title\": \"Response\",\n    \"value\": null\n  }\n]",
            "code": "chai.request(app)\n            .get('/')\n            .end((err, res) => {\n                res.should.have.status(200);\n                res.body.should.be.a('array');\n                expect(res.body.length).to.equal(newTweets.length);\n                done();\n            });",
            "err": {},
            "isRoot": false,
            "uuid": "8eda2556-0681-430e-acae-f1e20c81a827",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "c1285f06-1737-4cd6-9793-98ebeb4741ed",
          "e4044840-6fad-49e8-89e8-8f9b11c606ed",
          "e85c8b01-b97a-4607-b893-805962c047d3",
          "9a944f8a-72fb-48e0-9c5b-45b95138c2d5",
          "8eda2556-0681-430e-acae-f1e20c81a827"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 2815,
        "root": false,
        "rootEmpty": false,
        "_timeout": null
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": null
  },
  "copyrightYear": 2019
}